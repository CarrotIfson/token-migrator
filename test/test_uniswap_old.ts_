/* import { expect } from "chai";
import { ethers } from "hardhat";
import { Contract } from "@ethersproject/contracts";
import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers";
import * as chai from "chai";
import { keccak256 } from "ethers/lib/utils";
import { IERC20 } from "../typechain";
import BigNumber from 'bignumber.js';
import { Signer } from "ethers";

*/
import { expect } from "chai";
import { ethers, network } from "hardhat";
import { HardhatRuntimeEnvironment } from "hardhat/types"
import { Contract } from "@ethersproject/contracts";
import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers";
import * as chai from "chai";
import { keccak256 } from "ethers/lib/utils";
//import { IERC20 } from "../typechain";
import BigNumber from 'bignumber.js';
import { Signer, BigNumberish } from "ethers";
const chaiAsPromised = require('chai-as-promised');
chai.use(chaiAsPromised);



function parse18Dec(amount: Number) {
    return ethers.utils.parseUnits(amount.toString(), 18);
}
function parseWei(amount: BigNumberish) {
    return parseFloat(ethers.utils.formatEther(amount));
}

describe("Swap", function () {
    let owner: SignerWithAddress,
        susan: SignerWithAddress,
        bob: SignerWithAddress,
        carl: SignerWithAddress;

    let swap: Contract;
    let TO: SignerWithAddress;
    let tokenIn: IERC20;

    const DAI = "0x6B175474E89094C44Da98b954EedeAC495271d0F";
    const DAI_WHALE = "0xF977814e90dA44bFA03b6295A0616a897441aceC";
    const WBTC = "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599";
    const WETH = "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2";

    const WHALE = DAI_WHALE;
    const AMOUNT_IN = parse18Dec(150000);//new BigNumber(10).pow(new BigNumber(18)).multipliedBy(new BigNumber(1000000)); // 1 000 000 DAI
    
    const X7_AMOUNT_IN = parse18Dec(150000);
    const AMOUNT_OUT_MIN = 1;
    const TOKEN_IN = DAI;
    const TOKEN_OUT = WBTC;

    let signer: JsonRpcSigner;

    this.beforeEach(async () => { 
        //await ethers.provider.send("hardhat_reset", []);
        [owner, susan, bob, carl] = await ethers.getSigners();
        const Swap = await ethers.getContractFactory("Swap", owner);
        swap = await Swap.deploy();
        console.log(`\tDeployed Swap contract at ${swap.address}`); 

        signer = await ethers.provider.getSigner(DAI_WHALE);
        signer.address = signer._address;
    })
    
    it("Swap 1M DAI for WETH", async function () {
        tokenIn = await ethers.getContractAt("IERC20", DAI);
        const weth = await ethers.getContractAt("IERC20", WETH);
        //console.log(`WETH balance: ${await weth.balanceOf(owner.address)}`);
        //console.log(`\tDAI balance: ${parseWei(await tokenIn.balanceOf(DAI_WHALE))}`);
        const prevWhaleBalance = parseWei(await tokenIn.balanceOf(DAI_WHALE));
        const prevOwnerBalance = parseWei(await weth.balanceOf(DAI_WHALE));

        //const signer = await ethers.provider.getSigner(WHALE);
        await network.provider.request({
            method: "hardhat_impersonateAccount",
            params: [DAI_WHALE],
        });

        const signer = await ethers.provider.getSigner(DAI_WHALE);
        signer.address = signer._address;

        const minOut = await swap.connect(signer).getOutWEthMin(DAI, AMOUNT_IN);
        //console.log(`\tExpecting ${await  ethers.utils.formatEther(minOut)} weth from ${ethers.utils.formatEther(AMOUNT_IN)} DAI`);

        await tokenIn.connect(signer).approve(swap.address, AMOUNT_IN);
        await swap.connect(signer).swapForWEth(DAI, AMOUNT_IN, minOut, DAI_WHALE);
        const whaleBalance = parseWei(await tokenIn.balanceOf(DAI_WHALE));
        //console.log(`\tDAI balance: ${parseWei(await tokenIn.balanceOf(DAI_WHALE))}`);
        const ownerBalance = parseWei(await weth.balanceOf(DAI_WHALE));
        let res = prevWhaleBalance - whaleBalance;
        await expect(res == parseWei(AMOUNT_IN));
        res = ownerBalance - prevOwnerBalance;
        await expect(res == parseWei(minOut));
    })

    it("Swap 100k x7m105 for WETH", async function () {
        tokenIn = await ethers.getContractAt("IERC20", DAI);
        const weth = await ethers.getContractAt("IERC20", WETH);
        //console.log(`WETH balance: ${await weth.balanceOf(owner.address)}`);
        //console.log(`\tDAI balance: ${parseWei(await tokenIn.balanceOf(DAI_WHALE))}`);
        const prevWhaleBalance = parseWei(await tokenIn.balanceOf(DAI_WHALE));
        const prevOwnerBalance = parseWei(await weth.balanceOf(DAI_WHALE));

        //const signer = await ethers.provider.getSigner(WHALE);
        await network.provider.request({
            method: "hardhat_impersonateAccount",
            params: [DAI_WHALE],
        });

        const signer = await ethers.provider.getSigner(DAI_WHALE);
        signer.address = signer._address;

        const minOut = await swap.connect(signer).getOutWEthMin(DAI, AMOUNT_IN);
        //console.log(`\tExpecting ${await  ethers.utils.formatEther(minOut)} weth from ${ethers.utils.formatEther(AMOUNT_IN)} DAI`);

        await tokenIn.connect(signer).approve(swap.address, AMOUNT_IN);
        await swap.connect(signer).swapForWEth(DAI, AMOUNT_IN, minOut, DAI_WHALE);
        const whaleBalance = parseWei(await tokenIn.balanceOf(DAI_WHALE));
        //console.log(`\tDAI balance: ${parseWei(await tokenIn.balanceOf(DAI_WHALE))}`);
        const ownerBalance = parseWei(await weth.balanceOf(DAI_WHALE));
        let res = prevWhaleBalance - whaleBalance;
        await expect(res == parseWei(AMOUNT_IN));
        res = ownerBalance - prevOwnerBalance;
        await expect(res == parseWei(minOut));
    })
    
    it("Add liquidity if pair exists", async function () {
        tokenIn = await ethers.getContractAt("IERC20", DAI);
        const weth = await ethers.getContractAt("IERC20", WETH);
        let prevOwnerBalanceWETH = parseWei(await weth.balanceOf(DAI_WHALE));
        console.log(`ETH: ${prevOwnerBalanceWETH}`);
        let prevOwnerBalanceDAI = parseWei(await tokenIn.balanceOf(DAI_WHALE));
        console.log(`DAI: ${prevOwnerBalanceDAI}`);
        await tokenIn.connect(signer).approve(swap.address, parse18Dec(140000));
        await weth.connect(signer).approve(swap.address, parse18Dec(100));
        await swap.connect(signer).addLiquidity(DAI, WETH, parse18Dec(140000), parse18Dec(100));
         
        prevOwnerBalanceWETH = prevOwnerBalanceWETH - parseWei(await weth.balanceOf(DAI_WHALE));
        console.log(`SPENT ETH: ${prevOwnerBalanceWETH}`);
        prevOwnerBalanceDAI = prevOwnerBalanceDAI - parseWei(await tokenIn.balanceOf(DAI_WHALE));
        console.log(`SPENT DAI: ${prevOwnerBalanceDAI}`);
    });
}) 
/*
describe("Swap", function () {
    let owner:SignerWithAddress,
          susan:SignerWithAddress,
          bob:SignerWithAddress,
          carl:SignerWithAddress;
        
    let swap:Contract; 
    let TO: SignerWithAddress;

    const DAI = "0x6B175474E89094C44Da98b954EedeAC495271d0F";
    const DAI_WHALE = "0xF977814e90dA44bFA03b6295A0616a897441aceC";
    const WBTC = "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599";
    const WETH = "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2";

    const WHALE = DAI_WHALE;
    const AMOUNT_1 = new BigNumber(10).pow(new BigNumber(18)).multipliedBy(new BigNumber(1000000)); // 1 000 000 DAI
    const AMOUNT_OUT_MIN = 1;
    const TOKEN_IN = DAI;
    const TOKEN_OUT = WBTC;
 

    this.beforeEach(async() => {

        await ethers.provider.send("hardhat_reset", []);
        [owner, susan, bob, carl] = await ethers.getSigners();
        const s = await ethers.getContractAt("IERC20", WETH);

        //const Swap = await ethers.getContractFactory("Swap", owner);
        //swap = await Swap.deploy(); 
        //const t = await ethers.getContractAt('IUniswapV2Router',"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D");

        TO = owner; 
    })
    

    ////// HAPPY PATH  /////////////////////////
    it("Should deposit into the vault", async() => {   
        console.log(`\tDeployed Swap contract at xxx`);//${swap.address}`); 
    });
    /*
    it("Should withdraw", async() => {
        //grant withdrawer role to Bob
        let WITHDRAWER_ROLE = keccak256(Buffer.from("WITHDRAWER_ROLE")).toString();
        await vault.grantRole(WITHDRAWER_ROLE, bob.address);

        //Set vault state
        await vault.setWithdrawEnabled(true);
        await vault.setMaxWithdrawalAmount(parseEther(1*10**6)); 
        //do some deposit
        await token.transfer(alice.address, parseEther(1 * 10**6)); 
        await token.connect(alice).approve(vault.address, token.balanceOf(alice.address)); 
        await vault.connect(alice).deposit(parseEther(500*10**3)); 

        //withdraw
        await vault.connect(bob).withdraw(parseEther(300*10**3), bob.address); 
        expect(await token.balanceOf(vault.address)).equal(parseEther(200*10**3)); 
        expect(await token.balanceOf(bob.address)).equal(parseEther(300*10**3));

        //case for owner
        await vault.connect(owner).withdraw(parseEther(200*10**3), bob.address); 
        expect(await token.balanceOf(vault.address)).equal(parseEther(0*10**3)); 
        expect(await token.balanceOf(bob.address)).equal(parseEther(500*10**3));
    });


    ////// UNHAPPY PATH  ///////////////////////
    it("Should FAIL to deposit, Insufficient account balance", async() => { 
        await token.transfer(alice.address, parseEther(1 * 10**6)); 
        await token.connect(alice).approve(vault.address, token.balanceOf(alice.address));  
        await expect(vault.connect(alice).deposit(parseEther(2*10**6))).revertedWith("Insufficient account balance"); 
        //set approve to balance-1
        await token.connect(alice).approve(vault.address, (await token.balanceOf(alice.address)).sub(1));  
        await expect(vault.connect(alice).deposit(parseEther(1*10**6))).revertedWith("ERC20: insufficient allowance");  
    });

    it("Should FAIL to withdraw, Caller is not a withdrawer", async() => {  
        await token.transfer(alice.address, parseEther(1 * 10**6)); 
        await token.connect(alice).approve(vault.address, token.balanceOf(alice.address));  
        await vault.connect(alice).deposit(parseEther(1*10**6));
        await expect(vault.connect(alice).withdraw(parseEther(1*10**3), alice.address)).revertedWith("Caller is not a withdrawer");    
    });

    it("Should FAIL to withdraw, Withdraw is not enabled", async() => {  
        //grant withdrawer role to alice
        let WITHDRAWER_ROLE = keccak256(Buffer.from("WITHDRAWER_ROLE")).toString();
        await vault.grantRole(WITHDRAWER_ROLE, alice.address); 

        await token.transfer(alice.address, parseEther(1 * 10**6)); 
        await token.connect(alice).approve(vault.address, token.balanceOf(alice.address));  
        await vault.connect(alice).deposit(parseEther(1*10**6));
        await expect(vault.connect(alice).withdraw(parseEther(1*10**3), alice.address)).revertedWith("Withdraw is not enabled");     
        //enable should succeed
        await vault.setWithdrawEnabled(true);
        await vault.connect(alice).withdraw(parseEther(0), alice.address);
        //when disabled should fail again
        await vault.setWithdrawEnabled(false);
        await expect(vault.connect(alice).withdraw(parseEther(1*10**3), alice.address)).revertedWith("Withdraw is not enabled");  
    });

    it("Should FAIL to withdraw, Amount should be lower than maxWithdrawalAmount", async() => {  
        //grant withdrawer role to alice
        let WITHDRAWER_ROLE = keccak256(Buffer.from("WITHDRAWER_ROLE")).toString();
        await vault.grantRole(WITHDRAWER_ROLE, alice.address); 
        await vault.setWithdrawEnabled(true);

        await token.transfer(alice.address, parseEther(1 * 10**6)); 
        await token.connect(alice).approve(vault.address, token.balanceOf(alice.address));  
        await vault.connect(alice).deposit(parseEther(1*10**6));
        await expect(vault.connect(alice).withdraw(parseEther(1*10**3), alice.address)).revertedWith("Amount should be lower than maxWithdrawalAmount");   
        //when enabled, should withdraw
        await vault.setMaxWithdrawalAmount(parseEther(10));
        await vault.connect(alice).withdraw(parseEther(10), alice.address);

        //when disabled, should fail again
        await vault.setMaxWithdrawalAmount(parseEther(1));
        await expect(vault.connect(alice).withdraw(parseEther(1*10**3), alice.address)).revertedWith("Amount should be lower than maxWithdrawalAmount");     
    });

    it("Should FAIL to withdraw, ERC20: transfer amount exceeds balance", async() => {  
        //grant withdrawer role to alice
        let WITHDRAWER_ROLE = keccak256(Buffer.from("WITHDRAWER_ROLE")).toString();
        await vault.grantRole(WITHDRAWER_ROLE, alice.address); 
        await vault.setWithdrawEnabled(true);
        await vault.setMaxWithdrawalAmount(parseEther(10 * 10**6));

        await token.transfer(alice.address, parseEther(1 * 10**6)); 
        await token.connect(alice).approve(vault.address, token.balanceOf(alice.address));  
        await vault.connect(alice).deposit(parseEther(1*10**6));
        await expect(vault.connect(alice).withdraw(parseEther(2*10**6), alice.address)).revertedWith("ERC20: transfer amount exceeds balance");     
    });

});

*/