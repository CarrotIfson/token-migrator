/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SwapInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(address,address,uint256,uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "getDepositedAmount(address)": FunctionFragment;
    "getOutMin(address,address,uint256)": FunctionFragment;
    "swapForWEth(address,uint256,uint256,address)": FunctionFragment;
    "swapTokens(address,uint256,address,uint256,address,bool)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositedAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutMin",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapForWEth",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokens",
    values: [string, BigNumberish, string, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOutMin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapForWEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {};
}

export class Swap extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: SwapInterface;

  functions: {
    addLiquidity(
      _tokenA: string,
      _tokenB: string,
      _amountA: BigNumberish,
      _amountB: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addLiquidity(address,address,uint256,uint256)"(
      _tokenA: string,
      _tokenB: string,
      _amountA: BigNumberish,
      _amountB: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getDepositedAmount(
      depositor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getDepositedAmount(address)"(
      depositor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOutMin(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getOutMin(address,address,uint256)"(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    swapForWEth(
      _tokenIn: string,
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapForWEth(address,uint256,uint256,address)"(
      _tokenIn: string,
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapTokens(
      _tokenIn: string,
      _amountIn: BigNumberish,
      _tokenOut: string,
      _amountOutMin: BigNumberish,
      _to: string,
      isFot: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapTokens(address,uint256,address,uint256,address,bool)"(
      _tokenIn: string,
      _amountIn: BigNumberish,
      _tokenOut: string,
      _amountOutMin: BigNumberish,
      _to: string,
      isFot: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawAll(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawAll()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  addLiquidity(
    _tokenA: string,
    _tokenB: string,
    _amountA: BigNumberish,
    _amountB: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addLiquidity(address,address,uint256,uint256)"(
    _tokenA: string,
    _tokenB: string,
    _amountA: BigNumberish,
    _amountB: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getDepositedAmount(
    depositor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDepositedAmount(address)"(
    depositor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOutMin(
    _tokenIn: string,
    _tokenOut: string,
    _amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getOutMin(address,address,uint256)"(
    _tokenIn: string,
    _tokenOut: string,
    _amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  swapForWEth(
    _tokenIn: string,
    _amountIn: BigNumberish,
    _amountOutMin: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapForWEth(address,uint256,uint256,address)"(
    _tokenIn: string,
    _amountIn: BigNumberish,
    _amountOutMin: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapTokens(
    _tokenIn: string,
    _amountIn: BigNumberish,
    _tokenOut: string,
    _amountOutMin: BigNumberish,
    _to: string,
    isFot: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapTokens(address,uint256,address,uint256,address,bool)"(
    _tokenIn: string,
    _amountIn: BigNumberish,
    _tokenOut: string,
    _amountOutMin: BigNumberish,
    _to: string,
    isFot: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawAll(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawAll()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      _tokenA: string,
      _tokenB: string,
      _amountA: BigNumberish,
      _amountB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "addLiquidity(address,address,uint256,uint256)"(
      _tokenA: string,
      _tokenB: string,
      _amountA: BigNumberish,
      _amountB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "deposit(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getDepositedAmount(
      depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDepositedAmount(address)"(
      depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutMin(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOutMin(address,address,uint256)"(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapForWEth(
      _tokenIn: string,
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "swapForWEth(address,uint256,uint256,address)"(
      _tokenIn: string,
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokens(
      _tokenIn: string,
      _amountIn: BigNumberish,
      _tokenOut: string,
      _amountOutMin: BigNumberish,
      _to: string,
      isFot: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "swapTokens(address,uint256,address,uint256,address,bool)"(
      _tokenIn: string,
      _amountIn: BigNumberish,
      _tokenOut: string,
      _amountOutMin: BigNumberish,
      _to: string,
      isFot: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;

    "withdrawAll()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addLiquidity(
      _tokenA: string,
      _tokenB: string,
      _amountA: BigNumberish,
      _amountB: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addLiquidity(address,address,uint256,uint256)"(
      _tokenA: string,
      _tokenB: string,
      _amountA: BigNumberish,
      _amountB: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "deposit(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getDepositedAmount(
      depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDepositedAmount(address)"(
      depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutMin(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOutMin(address,address,uint256)"(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapForWEth(
      _tokenIn: string,
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapForWEth(address,uint256,uint256,address)"(
      _tokenIn: string,
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapTokens(
      _tokenIn: string,
      _amountIn: BigNumberish,
      _tokenOut: string,
      _amountOutMin: BigNumberish,
      _to: string,
      isFot: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapTokens(address,uint256,address,uint256,address,bool)"(
      _tokenIn: string,
      _amountIn: BigNumberish,
      _tokenOut: string,
      _amountOutMin: BigNumberish,
      _to: string,
      isFot: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawAll(overrides?: Overrides): Promise<BigNumber>;

    "withdrawAll()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      _tokenA: string,
      _tokenB: string,
      _amountA: BigNumberish,
      _amountB: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addLiquidity(address,address,uint256,uint256)"(
      _tokenA: string,
      _tokenB: string,
      _amountA: BigNumberish,
      _amountB: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getDepositedAmount(
      depositor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDepositedAmount(address)"(
      depositor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutMin(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOutMin(address,address,uint256)"(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapForWEth(
      _tokenIn: string,
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapForWEth(address,uint256,uint256,address)"(
      _tokenIn: string,
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapTokens(
      _tokenIn: string,
      _amountIn: BigNumberish,
      _tokenOut: string,
      _amountOutMin: BigNumberish,
      _to: string,
      isFot: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapTokens(address,uint256,address,uint256,address,bool)"(
      _tokenIn: string,
      _amountIn: BigNumberish,
      _tokenOut: string,
      _amountOutMin: BigNumberish,
      _to: string,
      isFot: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawAll(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawAll()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
